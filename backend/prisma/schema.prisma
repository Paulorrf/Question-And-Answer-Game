generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model answer {
  id                        Int                         @id @default(autoincrement())
  body                      String
  question_id               Int
  is_correct                Boolean                     @default(false)
  question                  question                    @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  history_answered_question history_answered_question[]
}

model question {
  id                        Int                         @id @default(autoincrement())
  body                      String                      @db.VarChar(255)
  description_right_answer  String                      @db.VarChar(255)
  situation                 situation                   @default(active)
  user_data_id              Int
  question_set_id           Int
  answer                    answer[]
  history_answered_question history_answered_question[]
  question_set              question_set                @relation(fields: [question_set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_data                 user_data                   @relation(fields: [user_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model character {
  id        Int         @id @default(autoincrement())
  classe_id Int
  status_id Int
  classes   classes     @relation(fields: [classe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status    status      @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_data user_data[]
}

model question_set {
  id                            Int                             @id @default(autoincrement())
  answered_number               Int?                            @default(0)
  title                         String                          @db.VarChar(255)
  description                   String                          @db.VarChar(255)
  rating                        Int?                            @default(1)
  difficulty                    difficulty?
  situation                     situation                       @default(active)
  history_answered_set_question history_answered_set_question[]
  question                      question[]
  question_set_tag              question_set_tag[]
}

model classes {
  id        Int         @id @default(autoincrement())
  nome      races       @unique(map: "nome_classe")
  status_id Int?
  character character[]
  status    status?     @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model history_answered_question {
  id               Int         @id @default(autoincrement())
  user_data_id     Int
  question_id      Int
  chosen_answer_id Int
  portal_spec_id   Int
  answer           answer      @relation(fields: [chosen_answer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portal_spec      portal_spec @relation(fields: [portal_spec_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  question         question    @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_data        user_data   @relation(fields: [user_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model history_answered_set_question {
  id              Int          @id @default(autoincrement())
  user_data_id    Int
  question_set_id Int
  question_set    question_set @relation(fields: [question_set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_data       user_data    @relation(fields: [user_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model portal {
  id                  Int                   @id @default(autoincrement())
  name                String                @db.VarChar(255)
  portal_spec         portal_spec[]
  portal_spec_primary portal_spec_primary[]

  @@index([name], map: "portal_idx")
}

model portal_spec {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @unique(map: "unique_name") @db.VarChar(255)
  portal_id                 Int
  history_answered_question history_answered_question[]
  portal                    portal                      @relation(fields: [portal_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portal_spec_primary       portal_spec_primary[]
  user_right_answer         user_right_answer[]

  @@index([name], map: "portal_spec_idx")
}

model question_set_tag {
  question_set_id Int
  tag_id          Int
  question_set    question_set @relation(fields: [question_set_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag             tag          @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "question_set_tag_tag_id_fkey1")

  @@id([question_set_id, tag_id], map: "question_set_tag_pkey1")
}

model status {
  id           Int         @id @default(autoincrement())
  strength     Int         @default(1)
  intelligence Int         @default(1)
  agility      Int         @default(1)
  luck         Int         @default(1)
  character    character[]
  classes      classes[]
}

model tag {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar(255)
  question_set_tag question_set_tag[]
}

model token {
  id          Int         @id @default(autoincrement())
  access_tk   String?     @db.VarChar(255)
  referesh_tk String?     @db.VarChar(255)
  user_data   user_data[]
}

model user_data {
  id                            Int                             @id @default(autoincrement())
  name                          String                          @db.VarChar(255)
  email                         String                          @unique(map: "user_data_username_key") @db.VarChar(255)
  nivel                         Int                             @default(1)
  character_id                  Int
  tokens_id                     Int
  display_name                  String?                         @db.VarChar(255)
  password                      String?                         @db.VarChar(255)
  experience                    Int                             @default(0)
  status_point_remain           Int?                            @default(0)
  history_answered_question     history_answered_question[]
  history_answered_set_question history_answered_set_question[]
  question                      question[]
  character                     character                       @relation(fields: [character_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  token                         token                           @relation(fields: [tokens_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_right_answer             user_right_answer[]
}

model user_right_answer {
  count          Int?        @default(0)
  user_data_id   Int
  portal_spec_id Int
  portal_spec    portal_spec @relation(fields: [portal_spec_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_data      user_data   @relation(fields: [user_data_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_data_id, portal_spec_id])
}

model portal_spec_primary {
  portal_spec_id Int
  portal_id      Int
  comp_key       Int         @unique
  portal         portal      @relation(fields: [portal_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  portal_spec    portal_spec @relation(fields: [portal_spec_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([portal_spec_id, portal_id])
  @@unique([portal_spec_id, portal_id], map: "unique_column_name")
  @@index([comp_key], map: "comp_key_idx")
}

model portal_requirements {
  id                    Int    @id @default(autoincrement())
  portal_name           String @db.VarChar(255)
  difficulty            String @db.VarChar(50)
  intelligence_required Int
  strength_required     Int
  luck_required         Int
  agility_required      Int
}

enum difficulty {
  easy
  normal
  hard
  very_hard
  expert
}

enum situation {
  active
  inactive
  deleted
}

enum races {
  elfo
  humano
  orc
}

enum classe_opt {
  orc
  elfo
  humano
}
